#include <iostream>
#include <fstream>
#include <string>

// Функция для создания директории
bool createDirectory(const std::string& path)
{
    // Используем функцию mkdir для создания директории
    int result = mkdir(path.c_str(), 0777);
    
    if (result != 0)
    {
        // Если функция mkdir возвращает ненулевое значение, значит произошла ошибка
        std::cout << "Ошибка создания директории " << path << std::endl;
        return false;
    }
    
    return true;
}

// Функция для создания файла
bool createFile(const std::string& path, const std::string& content)
{
    // Создаем объект класса ofstream и открываем файл для записи
    std::ofstream file(path);
    
    if (!file)
    {
        // Если не удалось открыть файл, выводим сообщение об ошибке
        std::cout << "Ошибка открытия файла " << path << std::endl;
        return false;
    }
    
    // Записываем переданный текст в файл
    file << content;
    
    // Закрываем файл
    file.close();
    
    return true;
}

int main()
{
    // Получаем от пользователя параметры для генерации файлов и папок
    int numFolders;
    std::cout << "Введите количество папок: ";
    std::cin >> numFolders;
    
    int filesPerFolder;
    std::cout << "Введите количество файлов в каждой папке: ";
    std::cin >> filesPerFolder;
    
    std::string basePath;
    std::cout << "Введите базовый путь: ";
    std::cin >> basePath;
    
    // Генерируем папки и файлы
    for (int i = 1; i <= numFolders; i++)
    {
        std::string folderPath = basePath + "/folder" + std::to_string(i);
        
        // Создаем папку
        if (createDirectory(folderPath))
        {
            for (int j = 1; j <= filesPerFolder; j++)
            {
                std::string filePath = folderPath + "/file" + std::to_string(j) + ".txt";
                std::string fileContent = "Содержимое файла " + std::to_string(j);
                
                // Создаем файл
                createFile(filePath, fileContent);
            }
        }
    }
    
    return 0;
}


В данном примере представлена программа, которая генерирует указанное количество папок и файлов в каждой папке. Она запрашивает у пользователя количество папок, количество файлов в каждой папке и базовый путь для создания структуры папок и файлов.

Функция createDirectory используется для создания папки с помощью функции mkdir. Она принимает путь к папке в виде строки и возвращает true, если папка была успешно создана, и false в противном случае.

Функция createFile используется для создания файла с помощью класса std::ofstream. Она принимает путь к файлу и его содержимое в виде строк и возвращает true, если файл был успешно создан, и false в противном случае.

В основной функции main сначала запрашиваются у пользователя параметры для генерации файлов и папок. Затем выполняется цикл для создания указанного количества папок. Внутри этого цикла создаются папки с помощью функции createDirectory и выполняется вложенный цикл для создания указанного количества файлов в каждой папке. Файлы создаются с помощью функции createFile и записывается в них соответствующее содержимое.

Надеюсь, этот пример поможет вам в решении задачи генерации папок и файлов по заданным параметрам на языке C++.
очиститьОчистить чат
Какой код написать или проверить?
Отправить
Какой код написать или проверить?
Отправить
Вы когда-нибудь задумывались, как написать код на Python, Java, C++ или JavaScript онлайн с помощью нейросети? В наши дни,
